[
  {
    "name": "cicd",
    "providers": [
      {
        "name": "github",
        "short_description": "GITHUB Rules",
        "rules": [
          {
            "name": "run_block_injection",
            "short_description": "Run block injection"
          },
          {
            "name": "script_block_injection",
            "short_description": "Script block injection"
          },
          {
            "name": "unpinned_actions_full_length_commit_sha",
            "short_description": "Unpinned actions full length commit SHA"
          },
          {
            "name": "unsecured_commands",
            "short_description": "Unsecured commands"
          }
        ]
      }
    ]
  },
  {
    "name": "k8s",
    "providers": [
      {
        "name": "k8s",
        "short_description": "K8S Rules",
        "rules": [
          {
            "name": "always_admit_admission_control_plugin_set",
            "short_description": "Always admit admission control plugin set"
          },
          {
            "name": "always_pull_images_admission_control_plugin_not_set",
            "short_description": "Always pull images admission control plugin not set"
          },
          {
            "name": "anonymous_auth_is_not_set_to_false",
            "short_description": "Anonymous auth is not set to false"
          },
          {
            "name": "audit_log_maxage_not_properly_set",
            "short_description": "Audit log maxage not properly set"
          },
          {
            "name": "audit_log_maxbackup_not_properly_set",
            "short_description": "Audit log maxbackup not properly set"
          },
          {
            "name": "audit_log_maxsize_not_properly_set",
            "short_description": "Audit log maxsize not properly set"
          },
          {
            "name": "audit_log_path_not_set",
            "short_description": "Audit log path not set"
          },
          {
            "name": "audit_policy_file_not_defined",
            "short_description": "Audit policy file not defined"
          },
          {
            "name": "audit_policy_not_cover_key_security_concerns",
            "short_description": "Audit policy does not cover key security concerns"
          },
          {
            "name": "authorization_mode_node_not_set",
            "short_description": "Authorization mode node not set"
          },
          {
            "name": "authorization_mode_rbac_not_set",
            "short_description": "Authorization mode RBAC not set"
          },
          {
            "name": "authorization_mode_set_to_always_allow",
            "short_description": "Authorization mode set to always allow"
          },
          {
            "name": "auto_tls_set_to_true",
            "short_description": "Auto TLS set to true"
          },
          {
            "name": "basic_auth_file_is_set",
            "short_description": "Basic auth file is set"
          },
          {
            "name": "bind_address_not_properly_set",
            "short_description": "Bind address not properly set"
          },
          {
            "name": "client_certificate_authentication_not_setup_properly",
            "short_description": "Client certificate authentication not set up properly"
          },
          {
            "name": "cluster_admin_role_binding_with_super_user_permissions",
            "short_description": "Cluster admin rolebinding with superuser permissions"
          },
          {
            "name": "cluster_allows_unsafe_sysctls",
            "short_description": "Cluster allows unsafe sysctls"
          },
          {
            "name": "cni_plugin_does_not_support_network_policies",
            "short_description": "CNI plugin does not support network policies"
          },
          {
            "name": "container_is_privileged",
            "short_description": "Container is privileged"
          },
          {
            "name": "container_runs_unmasked",
            "short_description": "Container with unmasked /proc access"
          },
          {
            "name": "containers_run_with_low_uid",
            "short_description": "Container with low UID"
          },
          {
            "name": "containers_running_as_root",
            "short_description": "Container running as root"
          },
          {
            "name": "containers_with_added_capabilities",
            "short_description": "Containers with added capabilities"
          },
          {
            "name": "containers_with_sys_admin_capabilities",
            "short_description": "Containers with sys admin capabilities"
          },
          {
            "name": "cpu_limits_not_set",
            "short_description": "CPU limits not set"
          },
          {
            "name": "cpu_requests_not_set",
            "short_description": "CPU requests not set"
          },
          {
            "name": "cronjob_deadline_not_configured",
            "short_description": "CronJob deadline not configured"
          },
          {
            "name": "dashboard_is_enabled",
            "short_description": "Dashboard is enabled"
          },
          {
            "name": "deployment_has_no_pod_anti_affinity",
            "short_description": "Deployment without podAntiAffinity"
          },
          {
            "name": "deployment_without_pod_disruption_budget",
            "short_description": "Deployment without PodDisruptionBudget"
          },
          {
            "name": "docker_daemon_socket_is_exposed_to_containers",
            "short_description": "Docker daemon socket is exposed to containers"
          },
          {
            "name": "encryption_provider_config_is_not_defined",
            "short_description": "Encryption provider config is not defined"
          },
          {
            "name": "encryption_provider_not_properly_configured",
            "short_description": "Encryption provider not properly configured"
          },
          {
            "name": "ensure_administrative_boundaries_between_resources",
            "short_description": "Ensure administrative boundaries between resources"
          },
          {
            "name": "etcd_client_certificate_authentication_set_to_false",
            "short_description": "etcd client certificate authentication set to false"
          },
          {
            "name": "etcd_client_certificate_file_not_defined",
            "short_description": "etcd client certificate file not defined"
          },
          {
            "name": "etcd_peer_client_certificate_authentication_set_to_false",
            "short_description": "etcd peer client certificate authentication set to false"
          },
          {
            "name": "etcd_peer_tls_certificate_files_not_properly_set",
            "short_description": "etcd peer TLS certificate files not properly set"
          },
          {
            "name": "etcd_tls_certificate_files_not_properly_set",
            "short_description": "etcd TLS certificate files not properly set"
          },
          {
            "name": "etcd_tls_certificate_not_properly_configured",
            "short_description": "etcd TLS certificate not properly configured"
          },
          {
            "name": "event_rate_limit_admission_control_plugin_not_set",
            "short_description": "Event rate limit admission control plugin not set"
          },
          {
            "name": "hpa_targeted_deployments_with_configured_replica_count",
            "short_description": "HPA targeted deployments with configured replica count"
          },
          {
            "name": "hpa_targets_invalid_object",
            "short_description": "HPA targets invalid object"
          },
          {
            "name": "image_policy_webhook_admission_control_plugin_not_set",
            "short_description": "Image policy webhook admission control plugin not set"
          },
          {
            "name": "image_pull_policy_of_container_is_not_always",
            "short_description": "Image pull policy of the container is not set to always"
          },
          {
            "name": "image_without_digest",
            "short_description": "Image without digest"
          },
          {
            "name": "incorrect_volume_claim_access_mode_read_write_once",
            "short_description": "Incorrect volume claim access mode ReadWriteOnce"
          },
          {
            "name": "ingress_controller_exposes_workload",
            "short_description": "Ingress controller exposes workload"
          },
          {
            "name": "insecure_bind_address_set",
            "short_description": "Insecure bind address set"
          },
          {
            "name": "insecure_port_not_properly_set",
            "short_description": "Insecure port not properly set"
          },
          {
            "name": "invalid_image",
            "short_description": "Invalid image tag"
          },
          {
            "name": "kubelet_certificate_authority_not_set",
            "short_description": "Kubelet certificate authority not set"
          },
          {
            "name": "kubelet_client_certificate_or_key_not_set",
            "short_description": "Kubelet client certificate or key not set"
          },
          {
            "name": "kubelet_client_periodic_certificate_switch_disabled",
            "short_description": "Kubelet client periodic certificate switch disabled"
          },
          {
            "name": "kubelet_event_qps_not_properly_set",
            "short_description": "Kubelet event QPS not properly set"
          },
          {
            "name": "kubelet_hostname_override_is_set",
            "short_description": "Kubelet hostname override is set"
          },
          {
            "name": "kubelet_https_set_to_false",
            "short_description": "Kubelet HTTPS set to false"
          },
          {
            "name": "kubelet_not_managing_ip_tables",
            "short_description": "Kubelet not managing IP tables"
          },
          {
            "name": "kubelet_protect_kernel_defaults_set_to_false",
            "short_description": "Kubelet protect-kernel-defaults set to false"
          },
          {
            "name": "kubelet_read_only_port_is_not_set_to_zero",
            "short_description": "Kubelet read-only port is not set to zero"
          },
          {
            "name": "kubelet_streaming_connection_timeout_disabled",
            "short_description": "Kubelet streaming connection timeout disabled"
          },
          {
            "name": "liveness_probe_is_not_defined",
            "short_description": "Liveness probe is not defined"
          },
          {
            "name": "memory_limits_not_defined",
            "short_description": "Memory limits not defined"
          },
          {
            "name": "memory_requests_not_defined",
            "short_description": "Memory requests not defined"
          },
          {
            "name": "metadata_label_is_invalid",
            "short_description": "Invalid metadata label"
          },
          {
            "name": "missing_app_armor_config",
            "short_description": "Missing AppArmor profile"
          },
          {
            "name": "namespace_lifecycle_admission_control_plugin_disabled",
            "short_description": "Namespace lifecycle admission control plugin disabled"
          },
          {
            "name": "net_raw_capabilities_disabled_for_psp",
            "short_description": "NET_RAW capabilities disabled for PSP"
          },
          {
            "name": "net_raw_capabilities_not_being_dropped",
            "short_description": "NET_RAW capabilities not dropped"
          },
          {
            "name": "network_policy_is_not_targeting_any_pod",
            "short_description": "Network policy without Pod target"
          },
          {
            "name": "no_drop_capabilities_for_containers",
            "short_description": "Containers missing drop capabilities"
          },
          {
            "name": "node_restriction_admission_control_plugin_not_set",
            "short_description": "Node restriction admission control plugin not set"
          },
          {
            "name": "non_kube_system_pod_with_host_mount",
            "short_description": "Non kube-system pod with host mount"
          },
          {
            "name": "not_limited_capabilities_for_pod_security_policy",
            "short_description": "Unrestricted capabilities in PodSecurityPolicy"
          },
          {
            "name": "not_unique_certificate_authority",
            "short_description": "Certificate authority is not unique"
          },
          {
            "name": "object_is_using_a_deprecated_api_version",
            "short_description": "Object is using a deprecated API version"
          },
          {
            "name": "peer_auto_tls_set_to_true",
            "short_description": "Peer auto TLS set to true"
          },
          {
            "name": "permissive_access_to_create_pods",
            "short_description": "Permissive access to create Pods"
          },
          {
            "name": "pod_misconfigured_network_policy",
            "short_description": "Pod misconfigured network policy"
          },
          {
            "name": "pod_or_container_without_limit_range",
            "short_description": "Pod or container without LimitRange"
          },
          {
            "name": "pod_or_container_without_resource_quota",
            "short_description": "Pod or container without ResourceQuota"
          },
          {
            "name": "pod_or_container_without_security_context",
            "short_description": "Pod or container without security context"
          },
          {
            "name": "pod_security_policy_admission_control_plugin_not_set",
            "short_description": "Pod security policy admission control plugin not set"
          },
          {
            "name": "privilege_escalation_allowed",
            "short_description": "Privilege escalation allowed"
          },
          {
            "name": "profiling_not_set_to_false",
            "short_description": "Profiling not set to false"
          },
          {
            "name": "psp_allows_privilege_escalation",
            "short_description": "PSP allows privilege escalation"
          },
          {
            "name": "psp_allows_sharing_host_ipc",
            "short_description": "PSP allows sharing host IPC"
          },
          {
            "name": "psp_allows_sharing_host_pid",
            "short_description": "PSP allows sharing host PID"
          },
          {
            "name": "psp_containers_share_host_network_namespace",
            "short_description": "PodSecurityPolicy allows host network sharing"
          },
          {
            "name": "psp_set_to_privileged",
            "short_description": "PSP set to privileged"
          },
          {
            "name": "psp_with_added_capabilities",
            "short_description": "PSP with added capabilities"
          },
          {
            "name": "psp_with_unrestricted_access_to_host_path",
            "short_description": "PSP with unrestricted access to host path"
          },
          {
            "name": "rbac_roles_allow_privilege_escalation",
            "short_description": "RBAC roles allow privilege escalation"
          },
          {
            "name": "rbac_roles_with_attach_permission",
            "short_description": "RBAC roles with attach permission"
          },
          {
            "name": "rbac_roles_with_exec_permission",
            "short_description": "RBAC roles with exec permission"
          },
          {
            "name": "rbac_roles_with_impersonate_permission",
            "short_description": "RBAC roles with impersonate permission"
          },
          {
            "name": "rbac_roles_with_portforwarding_permissions",
            "short_description": "RBAC roles with port-forwarding permission"
          },
          {
            "name": "rbac_roles_with_read_secrets_permissions",
            "short_description": "RBAC roles with read secrets permissions"
          },
          {
            "name": "rbac_wildcard_in_rule",
            "short_description": "RBAC wildcard in rule"
          },
          {
            "name": "readiness_probe_is_not_configured",
            "short_description": "Readiness probe is not configured"
          },
          {
            "name": "request_timeout_not_properly_set",
            "short_description": "Request timeout not properly set"
          },
          {
            "name": "role_binding_to_default_service_account",
            "short_description": "Role binding to default service account"
          },
          {
            "name": "root_ca_file_not_defined",
            "short_description": "Root CA file not defined"
          },
          {
            "name": "root_container_not_mounted_as_read_only",
            "short_description": "Root container not mounted as read-only"
          },
          {
            "name": "root_containers_admitted",
            "short_description": "Root containers admitted"
          },
          {
            "name": "rotate_kubelet_server_certificate_not_active",
            "short_description": "Rotate Kubelet server certificate not active"
          },
          {
            "name": "seccomp_profile_is_not_configured",
            "short_description": "Seccomp profile is not configured"
          },
          {
            "name": "secrets_as_environment_variables",
            "short_description": "Secrets used as environment variables"
          },
          {
            "name": "secure_port_set_to_zero",
            "short_description": "Secure port set to zero"
          },
          {
            "name": "security_context_deny_admission_control_plugin_not_set",
            "short_description": "Security context deny admission control plugin not set"
          },
          {
            "name": "service_account_admission_control_plugin_disabled",
            "short_description": "Service account admission control plugin disabled"
          },
          {
            "name": "service_account_allows_access_secrets",
            "short_description": "ServiceAccount allows access to secrets"
          },
          {
            "name": "service_account_key_file_not_properly_set",
            "short_description": "Service account key file not properly set"
          },
          {
            "name": "service_account_lookup_set_to_false",
            "short_description": "Service account lookup set to false"
          },
          {
            "name": "service_account_name_undefined_or_empty",
            "short_description": "Service account name undefined or empty"
          },
          {
            "name": "service_account_private_key_file_not_defined",
            "short_description": "Service account private key file not defined"
          },
          {
            "name": "service_account_token_automount_not_disabled",
            "short_description": "Service account token auto-mount not disabled"
          },
          {
            "name": "service_does_not_target_pod",
            "short_description": "Service does not target a Pod"
          },
          {
            "name": "service_type_is_nodeport",
            "short_description": "Service type is NodePort"
          },
          {
            "name": "service_with_external_load_balancer",
            "short_description": "Service with external load balancer"
          },
          {
            "name": "shared_host_ipc_namespace",
            "short_description": "Shared host IPC namespace"
          },
          {
            "name": "shared_host_network_namespace",
            "short_description": "Shared host network namespace"
          },
          {
            "name": "shared_host_pid_namespace",
            "short_description": "Shared host PID namespace"
          },
          {
            "name": "shared_service_account",
            "short_description": "Shared service account"
          },
          {
            "name": "statefulset_has_no_pod_anti_affinity",
            "short_description": "StatefulSet without podAntiAffinity"
          },
          {
            "name": "statefulset_requests_storage",
            "short_description": "StatefulSet requests storage"
          },
          {
            "name": "statefulset_without_pod_disruption_budget",
            "short_description": "StatefulSet without PodDisruptionBudget"
          },
          {
            "name": "statefulset_without_service_name",
            "short_description": "StatefulSet without service name"
          },
          {
            "name": "terminated_pod_garbage_collector_threshold_not_properly_set",
            "short_description": "Terminated pod garbage collector threshold not properly set"
          },
          {
            "name": "tiller_deployment_is_accessible_from_within_the_cluster",
            "short_description": "Tiller Deployment accessible within cluster"
          },
          {
            "name": "tiller_is_deployed",
            "short_description": "Tiller (Helm v2) deployed"
          },
          {
            "name": "tiller_service_is_not_deleted",
            "short_description": "Tiller Service present"
          },
          {
            "name": "tls_connection_certificate_not_setup",
            "short_description": "TLS connection certificate not set up"
          },
          {
            "name": "token_auth_file_is_set",
            "short_description": "Token auth file is set"
          },
          {
            "name": "use_service_account_credentials_not_set_to_true",
            "short_description": "Use service account credentials not set to true"
          },
          {
            "name": "using_kubernetes_native_secret_management",
            "short_description": "Using Kubernetes native secret management"
          },
          {
            "name": "using_unrecommended_namespace",
            "short_description": "Using unrecommended namespace"
          },
          {
            "name": "volume_mount_with_os_directory_write_permissions",
            "short_description": "Volume mount with OS directory write permissions"
          },
          {
            "name": "weak_tls_cipher_suites",
            "short_description": "Weak TLS cipher suites"
          },
          {
            "name": "workload_host_port_not_specified",
            "short_description": "Workload host port not specified"
          },
          {
            "name": "workload_mounting_with_sensitive_os_directory",
            "short_description": "Workload mounting with sensitive OS directory"
          }
        ]
      }
    ]
  },
  {
    "name": "terraform",
    "providers": [
      {
        "name": "aws",
        "short_description": "AWS Rules",
        "rules": [
          {
            "name": "alb_deletion_protection_disabled",
            "short_description": "ALB deletion protection disabled"
          },
          {
            "name": "alb_is_not_integrated_with_waf",
            "short_description": "ALB is not integrated with WAF"
          },
          {
            "name": "alb_listening_on_http",
            "short_description": "ALB listening on HTTP"
          },
          {
            "name": "alb_not_dropping_invalid_headers",
            "short_description": "ALB not dropping invalid headers"
          },
          {
            "name": "amazon_dms_replication_instance_is_publicly_accessible",
            "short_description": "Amazon DMS replication instance is publicly accessible"
          },
          {
            "name": "amazon_mq_broker_encryption_disabled",
            "short_description": "AmazonMQ broker encryption disabled"
          },
          {
            "name": "ami_not_encrypted",
            "short_description": "AMI not encrypted"
          },
          {
            "name": "ami_owner_missing",
            "short_description": "AMI most recent without owner or filter"
          },
          {
            "name": "ami_shared_with_multiple_accounts",
            "short_description": "AMI shared with multiple accounts"
          },
          {
            "name": "api_gateway_access_logging_disabled",
            "short_description": "API Gateway access logging disabled"
          },
          {
            "name": "api_gateway_deployment_without_access_log_setting",
            "short_description": "API Gateway deployment without access log setting"
          },
          {
            "name": "api_gateway_deployment_without_api_gateway_usage_plan_associated",
            "short_description": "API gateway deployment without API gateway usage plan associated"
          },
          {
            "name": "api_gateway_endpoint_config_is_not_private",
            "short_description": "API Gateway endpoint config is not private"
          },
          {
            "name": "api_gateway_method_does_not_contains_an_api_key",
            "short_description": "API Gateway method does not contains an API key"
          },
          {
            "name": "api_gateway_method_settings_cache_not_encrypted",
            "short_description": "API Gateway method settings cache not encrypted"
          },
          {
            "name": "api_gateway_stage_without_api_gateway_usage_plan_associated",
            "short_description": "API Gateway stage without API Gateway usage plan associated"
          },
          {
            "name": "api_gateway_with_cloudwatch_logging_disabled",
            "short_description": "API Gateway with CloudWatch logging disabled"
          },
          {
            "name": "api_gateway_with_invalid_compression",
            "short_description": "API Gateway with invalid compression"
          },
          {
            "name": "api_gateway_with_open_access",
            "short_description": "API Gateway with open access"
          },
          {
            "name": "api_gateway_without_configured_authorizer",
            "short_description": "API Gateway without configured authorizer"
          },
          {
            "name": "api_gateway_without_security_policy",
            "short_description": "API Gateway without security policy"
          },
          {
            "name": "api_gateway_without_ssl_certificate",
            "short_description": "API Gateway without SSL certificate"
          },
          {
            "name": "api_gateway_without_waf",
            "short_description": "API Gateway without WAF"
          },
          {
            "name": "api_gateway_xray_disabled",
            "short_description": "API Gateway X-Ray disabled"
          },
          {
            "name": "athena_database_not_encrypted",
            "short_description": "Athena database not encrypted"
          },
          {
            "name": "athena_workgroup_not_encrypted",
            "short_description": "Athena workgroup not encrypted"
          },
          {
            "name": "aurora_with_disabled_at_rest_encryption",
            "short_description": "Aurora with disabled at rest encryption"
          },
          {
            "name": "authentication_without_mfa",
            "short_description": "Authentication without MFA"
          },
          {
            "name": "auto_scaling_group_with_no_associated_elb",
            "short_description": "Auto scaling group with no associated ELB"
          },
          {
            "name": "automatic_minor_upgrades_disabled",
            "short_description": "Automatic minor upgrades disabled"
          },
          {
            "name": "autoscaling_groups_supply_tags",
            "short_description": "Autoscaling groups supply tags"
          },
          {
            "name": "aws_password_policy_with_unchangeable_passwords",
            "short_description": "AWS password policy with unchangeable passwords"
          },
          {
            "name": "batch_job_definition_with_privileged_container_properties",
            "short_description": "Batch job definition with privileged container properties"
          },
          {
            "name": "ca_certificate_identifier_is_outdated",
            "short_description": "CA certificate identifier is outdated"
          },
          {
            "name": "cdn_configuration_is_missing",
            "short_description": "CDN configuration is missing"
          },
          {
            "name": "certificate_has_expired",
            "short_description": "Certificate has expired"
          },
          {
            "name": "certificate_rsa_key_bytes_lower_than_256",
            "short_description": "Certificate RSA key bytes lower than 256"
          },
          {
            "name": "cloudfront_logging_disabled",
            "short_description": "CloudFront logging disabled"
          },
          {
            "name": "cloudfront_viewer_protocol_policy_allows_http",
            "short_description": "Cloudfront viewer protocol policy allows HTTP"
          },
          {
            "name": "cloudfront_without_minimum_protocol_tls_1.2",
            "short_description": "CloudFront without minimum protocol TLS 1.2"
          },
          {
            "name": "cloudfront_without_waf",
            "short_description": "CloudFront without WAF"
          },
          {
            "name": "cloudtrail_log_file_validation_disabled",
            "short_description": "CloudTrail log file validation disabled"
          },
          {
            "name": "cloudtrail_log_files_not_encrypted_with_kms",
            "short_description": "CloudTrail log files not encrypted with KMS"
          },
          {
            "name": "cloudtrail_log_files_s3_bucket_is_publicly_accessible",
            "short_description": "CloudTrail log files S3 bucket is publicly accessible"
          },
          {
            "name": "cloudtrail_log_files_s3_bucket_with_logging_disabled",
            "short_description": "CloudTrail log files S3 bucket with logging disabled"
          },
          {
            "name": "cloudtrail_logging_disabled",
            "short_description": "CloudTrail logging disabled"
          },
          {
            "name": "cloudtrail_multi_region_disabled",
            "short_description": "CloudTrail multi region disabled"
          },
          {
            "name": "cloudtrail_not_integrated_with_cloudwatch",
            "short_description": "CloudTrail not integrated with CloudWatch"
          },
          {
            "name": "cloudtrail_sns_topic_name_undefined",
            "short_description": "CloudTrail SNS topic name undefined"
          },
          {
            "name": "cloudwatch_aws_config_configuration_changes_alarm_missing",
            "short_description": "CloudWatch AWS Config configuration changes alarm missing"
          },
          {
            "name": "cloudwatch_aws_organizations_changes_missing_alarm",
            "short_description": "CloudWatch AWS organizations changes missing alarm"
          },
          {
            "name": "cloudwatch_changes_to_nacl_alarm_missing",
            "short_description": "CloudWatch changes to NACL alarm missing"
          },
          {
            "name": "cloudwatch_cloudtrail_configuration_changes_alarm_missing",
            "short_description": "Cloudwatch CloudTrail configuration changes alarm missing"
          },
          {
            "name": "cloudwatch_disabling_or_scheduled_deletion_of_customer_created_cmk_alarm_missing",
            "short_description": "CloudWatch disabling or scheduled deletion of customer created CMK alarm missing"
          },
          {
            "name": "cloudwatch_iam_policy_changes_alarm_missing",
            "short_description": "CloudWatch IAM policy changes alarm missing"
          },
          {
            "name": "cloudwatch_log_group_not_encrypted",
            "short_description": "CloudWatch log group without KMS"
          },
          {
            "name": "cloudwatch_logging_disabled",
            "short_description": "CloudWatch logging disabled"
          },
          {
            "name": "cloudwatch_logs_destination_with_vulnerable_policy",
            "short_description": "CloudWatch logs destination with vulnerable policy"
          },
          {
            "name": "cloudwatch_management_console_auth_failed_alarm_missing",
            "short_description": "CloudWatch management console auth failed alarm missing"
          },
          {
            "name": "cloudwatch_management_console_sign_in_without_mfa_alarm_missing",
            "short_description": "CloudWatch console sign-in without MFA alarm missing"
          },
          {
            "name": "cloudwatch_metrics_disabled",
            "short_description": "CloudWatch metrics disabled"
          },
          {
            "name": "cloudwatch_network_gateways_changes_alarm_missing",
            "short_description": "CloudWatch network gateways changes alarm missing"
          },
          {
            "name": "cloudwatch_root_account_use_alarm_missing",
            "short_description": "CloudWatch root account use missing"
          },
          {
            "name": "cloudwatch_route_table_changes_alarm_missing",
            "short_description": "CloudWatch route table changes alarm missing"
          },
          {
            "name": "cloudwatch_s3_policy_change_alarm_missing",
            "short_description": "CloudWatch S3 policy change alarm missing"
          },
          {
            "name": "cloudwatch_security_group_changes_alarm_missing",
            "short_description": "Cloudwatch security group changes alarm missing"
          },
          {
            "name": "cloudwatch_unauthorized_access_defined_alarm_missing",
            "short_description": "CloudWatch unauthorized access alarm missing"
          },
          {
            "name": "cloudwatch_vpc_changes_alarm_missing",
            "short_description": "CloudWatch VPC changes alarm missing"
          },
          {
            "name": "cloudwatch_without_retention_period_specified",
            "short_description": "CloudWatch without retention period specified"
          },
          {
            "name": "cmk_is_unusable",
            "short_description": "CMK is unusable"
          },
          {
            "name": "cmk_rotation_disabled",
            "short_description": "CMK rotation disabled"
          },
          {
            "name": "codebuild_project_encrypted_with_aws_managed_key",
            "short_description": "CodeBuild project encrypted with AWS managed key"
          },
          {
            "name": "cognito_userpool_without_mfa",
            "short_description": "Cognito user pool without MFA"
          },
          {
            "name": "config_configuration_aggregator_to_all_regions_disabled",
            "short_description": "Configuration aggregator to all regions disabled"
          },
          {
            "name": "config_rule_for_encrypted_volumes_is_disabled",
            "short_description": "Config rule for encrypted volumes disabled"
          },
          {
            "name": "cross_account_iam_assume_role_policy_without_external_id_or_mfa",
            "short_description": "Cross-account IAM assume role policy without external id or MFA"
          },
          {
            "name": "dax_cluster_not_encrypted",
            "short_description": "DAX cluster not encrypted"
          },
          {
            "name": "db_instance_storage_not_encrypted",
            "short_description": "DB instance storage not encrypted"
          },
          {
            "name": "db_security_group_has_public_interface",
            "short_description": "DB security group has public interface"
          },
          {
            "name": "db_security_group_open_to_large_scope",
            "short_description": "DB security group open to large scope"
          },
          {
            "name": "db_security_group_with_public_scope",
            "short_description": "DB security group with public scope"
          },
          {
            "name": "db_snapshot_public",
            "short_description": "DB snapshot is public"
          },
          {
            "name": "default_security_groups_with_unrestricted_traffic",
            "short_description": "Default security groups with unrestricted traffic"
          },
          {
            "name": "default_vpc_exists",
            "short_description": "Default VPC exists"
          },
          {
            "name": "dms_endpoint_no_ssl_configured",
            "short_description": "DMS endpoints without SSL"
          },
          {
            "name": "docdb_cluster_encrypted_with_aws_managed_key",
            "short_description": "DocumentDB cluster encrypted with AWS managed key"
          },
          {
            "name": "docdb_cluster_not_encrypted",
            "short_description": "DocumentDB cluster not encrypted"
          },
          {
            "name": "docdb_cluster_without_kms",
            "short_description": "DocumentDB cluster without KMS"
          },
          {
            "name": "docdb_logging_disabled",
            "short_description": "DocumentDB logging is disabled"
          },
          {
            "name": "dynamodb_table_not_encrypted",
            "short_description": "DynamoDB table not encrypted"
          },
          {
            "name": "dynamodb_table_point_in_time_recovery_disabled",
            "short_description": "DynamoDB table Point-in-Time Recovery disabled"
          },
          {
            "name": "dynamodb_vpc_endpoint_without_route_table_association",
            "short_description": "Dynamodb VPC endpoint without route table association"
          },
          {
            "name": "ebs_default_encryption_disabled",
            "short_description": "EBS default encryption disabled"
          },
          {
            "name": "ebs_volume_encryption_disabled",
            "short_description": "EBS volume encryption disabled"
          },
          {
            "name": "ebs_volume_snapshot_not_encrypted",
            "short_description": "EBS volume snapshot not encrypted"
          },
          {
            "name": "ec2_instance_has_public_ip",
            "short_description": "EC2 instance has public IP"
          },
          {
            "name": "ec2_instance_monitoring_disabled",
            "short_description": "EC2 instance monitoring disabled"
          },
          {
            "name": "ec2_instance_using_api_keys",
            "short_description": "EC2 instance using API keys"
          },
          {
            "name": "ec2_instance_using_default_security_group",
            "short_description": "EC2 instance using default security group"
          },
          {
            "name": "ec2_instance_using_default_vpc",
            "short_description": "EC2 instance using default VPC"
          },
          {
            "name": "ec2_not_ebs_optimized",
            "short_description": "EC2 not EBS optimized"
          },
          {
            "name": "ecr_image_tag_not_immutable",
            "short_description": "ECR image tag not immutable"
          },
          {
            "name": "ecr_repository_is_publicly_accessible",
            "short_description": "ECR repository is publicly accessible"
          },
          {
            "name": "ecr_repository_not_encrypted",
            "short_description": "ECR repository not encrypted with CMK"
          },
          {
            "name": "ecr_repository_without_policy",
            "short_description": "ECR repository without policy"
          },
          {
            "name": "ecs_cluster_container_insights_disabled",
            "short_description": "ECS cluster with container insights disabled"
          },
          {
            "name": "ecs_service_admin_role_is_present",
            "short_description": "ECS service admin role is present"
          },
          {
            "name": "ecs_service_without_running_tasks",
            "short_description": "ECS service without running tasks"
          },
          {
            "name": "ecs_task_definition_network_mode_not_recommended",
            "short_description": "ECS task definition network mode not recommended"
          },
          {
            "name": "ecs_task_definition_volume_not_encrypted",
            "short_description": "ECS task definition volume not encrypted"
          },
          {
            "name": "efs_not_encrypted",
            "short_description": "EFS not encrypted"
          },
          {
            "name": "efs_with_vulnerable_policy",
            "short_description": "EFS with vulnerable policy"
          },
          {
            "name": "efs_without_kms",
            "short_description": "EFS without KMS"
          },
          {
            "name": "eks_cluster_encryption_disabled",
            "short_description": "EKS cluster encryption disabled"
          },
          {
            "name": "eks_cluster_has_public_access",
            "short_description": "EKS cluster has public access"
          },
          {
            "name": "eks_cluster_has_public_access_cidrs",
            "short_description": "EKS cluster has public access CIDRs"
          },
          {
            "name": "eks_cluster_log_disabled",
            "short_description": "EKS cluster logging is not enabled"
          },
          {
            "name": "eks_node_group_remote_access_disabled",
            "short_description": "EKS node group remote access disabled"
          },
          {
            "name": "elasticache_nodes_not_created_across_multi_az",
            "short_description": "ElastiCache nodes not created across multi AZ"
          },
          {
            "name": "elasticache_redis_cluster_without_backup",
            "short_description": "ElastiCache Redis cluster without backup"
          },
          {
            "name": "elasticache_replication_group_not_encrypted_at_rest",
            "short_description": "ElastiCache replication group not encrypted at rest"
          },
          {
            "name": "elasticache_replication_group_not_encrypted_at_transit",
            "short_description": "ElastiCache replication group not encrypted at transit"
          },
          {
            "name": "elasticache_using_default_port",
            "short_description": "ElastiCache using default port"
          },
          {
            "name": "elasticache_without_vpc",
            "short_description": "ElastiCache without VPC"
          },
          {
            "name": "elasticsearch_domain_not_encrypted_node_to_node",
            "short_description": "Elasticsearch domain not encrypted node to node"
          },
          {
            "name": "elasticsearch_domain_with_vulnerable_policy",
            "short_description": "Elasticsearch domain with vulnerable policy"
          },
          {
            "name": "elasticsearch_encryption_with_kms_is_disabled",
            "short_description": "Elasticsearch encryption with KMS disabled"
          },
          {
            "name": "elasticsearch_logs_disabled",
            "short_description": "Elasticsearch log disabled"
          },
          {
            "name": "elasticsearch_no_finegrain_access_control",
            "short_description": "Fine-grained access control disabled for OpenSearch/Elasticsearch"
          },
          {
            "name": "elasticsearch_not_encrypted_at_rest",
            "short_description": "Elasticsearch not encrypted at rest"
          },
          {
            "name": "elasticsearch_using_default_security_group",
            "short_description": "Elasticsearch uses default security group"
          },
          {
            "name": "elasticsearch_with_https_disabled",
            "short_description": "Elasticsearch with HTTPS disabled"
          },
          {
            "name": "elasticsearch_without_iam_authentication",
            "short_description": "Elasticsearch without IAM authentication"
          },
          {
            "name": "elasticsearch_without_slow_logs",
            "short_description": "Elasticsearch without slow logs"
          },
          {
            "name": "elb_access_logging_disabled",
            "short_description": "ELB access log disabled"
          },
          {
            "name": "elb_using_insecure_protocols",
            "short_description": "ELB using insecure protocols"
          },
          {
            "name": "elb_using_weak_ciphers",
            "short_description": "ELB using weak ciphers"
          },
          {
            "name": "emr_without_vpc",
            "short_description": "EMR without VPC"
          },
          {
            "name": "global_accelerator_flow_logs_disabled",
            "short_description": "Global Accelerator flow logs disabled"
          },
          {
            "name": "glue_data_catalog_encryption_disabled",
            "short_description": "Glue Data Catalog encryption disabled"
          },
          {
            "name": "glue_security_configuration_encryption_disabled",
            "short_description": "Glue security configuration encryption disabled"
          },
          {
            "name": "glue_with_vulnerable_policy",
            "short_description": "Glue with vulnerable policy"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_glue_UpdateDevEndpoint",
            "short_description": "Group with privilege escalation by actions 'glue:UpdateDevEndpoint'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_AddUserToGroup",
            "short_description": "Group with privilege escalation by actions 'iam:AddUserToGroup'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_AttachGroupPolicy",
            "short_description": "Group with privilege escalation by actions 'iam:AttachGroupPolicy'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_AttachRolePolicy",
            "short_description": "Group with privilege escalation by actions 'iam:AttachRolePolicy'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_AttachUserPolicy",
            "short_description": "Group with privilege escalation by actions 'iam:AttachUserPolicy'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_CreateAccessKey",
            "short_description": "Group with privilege escalation by actions 'iam:CreateAccessKey'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_CreateLoginProfile",
            "short_description": "Group with privilege escalation by actions 'iam:CreateLoginProfile'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_CreatePolicyVersion",
            "short_description": "Group with privilege escalation by actions 'iam:CreatePolicyVersion'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_PassRole_and_cloudformation_CreateStack",
            "short_description": "Group with privilege escalation by actions 'cloudformation:CreateStack' and 'iam:PassRole'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_PassRole_and_ec2_RunInstances",
            "short_description": "Group with privilege escalation by actions 'ec2:RunInstances' and 'iam:PassRole'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_PassRole_and_glue_CreateDevEndpoint",
            "short_description": "Group with privilege escalation by actions 'glue:CreateDevEndpoint' and 'iam:PassRole'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_PassRole_and_lambda_CreateFunction_and_lambda_InvokeFunction",
            "short_description": "Group with privilege escalation by actions 'lambda:CreateFunction' and 'iam:PassRole' and 'lambda:InvokeFunction'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_PutGroupPolicy",
            "short_description": "Group with privilege escalation by actions 'iam:PutGroupPolicy'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_PutRolePolicy",
            "short_description": "Group with privilege escalation by actions 'iam:PutRolePolicy'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_PutUserPolicy",
            "short_description": "Group with privilege escalation by actions 'iam:PutUserPolicy'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_SetDefaultPolicyVersion",
            "short_description": "Group with privilege escalation by actions 'iam:SetDefaultPolicyVersion'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_UpdateAssumeRolePolicy_and_sts_AssumeRole",
            "short_description": "Group with privilege escalation by actions 'iam:UpdateAssumeRolePolicy' and 'sts:AssumeRole'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_iam_UpdateLoginProfile",
            "short_description": "Group with privilege escalation by actions 'iam:UpdateLoginProfile'"
          },
          {
            "name": "group_with_privilege_escalation_by_actions_lambda_UpdateFunctionCode",
            "short_description": "Group with privilege escalation by actions 'lambda:UpdateFunctionCode'"
          },
          {
            "name": "guardduty_detector_disabled",
            "short_description": "GuardDuty detector disabled"
          },
          {
            "name": "hardcoded_aws_access_key",
            "short_description": "Hardcoded AWS access key"
          },
          {
            "name": "hardcoded_aws_access_key_in_lambda",
            "short_description": "Hardcoded AWS access key in Lambda"
          },
          {
            "name": "http_port_open",
            "short_description": "HTTP port open to internet"
          },
          {
            "name": "iam_access_key_is_exposed",
            "short_description": "IAM access key is exposed"
          },
          {
            "name": "iam_database_auth_not_enabled",
            "short_description": "IAM database auth not enabled"
          },
          {
            "name": "iam_group_without_users",
            "short_description": "IAM group without users"
          },
          {
            "name": "iam_password_does_not_require_lowercase",
            "short_description": "IAM password policy does not require lowercase letter"
          },
          {
            "name": "iam_password_does_not_require_number",
            "short_description": "IAM password policy does not require numbers"
          },
          {
            "name": "iam_password_does_not_require_symbol",
            "short_description": "IAM password policy does not require symbol"
          },
          {
            "name": "iam_password_does_not_require_uppercase",
            "short_description": "IAM password policy does not require uppercase letter"
          },
          {
            "name": "iam_password_without_minimum_length",
            "short_description": "IAM password without minimum length"
          },
          {
            "name": "iam_policies_attached_to_user",
            "short_description": "IAM policies attached to user"
          },
          {
            "name": "iam_policies_with_full_privileges",
            "short_description": "IAM policies with full privileges"
          },
          {
            "name": "iam_policy_grants_assumerole_permission_across_all_services",
            "short_description": "IAM policy grants 'AssumeRole' permission across all services"
          },
          {
            "name": "iam_policy_grants_full_permissions",
            "short_description": "IAM policy grants full permissions"
          },
          {
            "name": "iam_role_allows_all_principals_to_assume",
            "short_description": "IAM role allows all principals to assume"
          },
          {
            "name": "iam_role_policy_passrole_allows_all",
            "short_description": "IAM role policy passrole allows all"
          },
          {
            "name": "iam_role_with_full_privileges",
            "short_description": "IAM role with full privileges"
          },
          {
            "name": "iam_user_policy_without_mfa",
            "short_description": "IAM user policy without MFA"
          },
          {
            "name": "iam_user_too_many_access_keys",
            "short_description": "IAM user has too many access keys"
          },
          {
            "name": "iam_user_with_access_to_console",
            "short_description": "IAM user with access to console"
          },
          {
            "name": "imdsv1_is_enabled",
            "short_description": "IMDSv1 enabled"
          },
          {
            "name": "instance_with_no_vpc",
            "short_description": "Instance with no VPC"
          },
          {
            "name": "kinesis_not_encrypted_with_kms",
            "short_description": "Kinesis not encrypted with KMS"
          },
          {
            "name": "kinesis_sse_not_configured",
            "short_description": "Kinesis SSE not configured"
          },
          {
            "name": "kms_key_with_full_permissions",
            "short_description": "KMS key with vulnerable policy"
          },
          {
            "name": "kms_key_with_no_deletion_window",
            "short_description": "KMS key with no deletion window"
          },
          {
            "name": "lambda_function_publicly_accessible",
            "short_description": "Lambda function publicly accessible"
          },
          {
            "name": "lambda_function_with_privileged_role",
            "short_description": "Lambda function with privileged role"
          },
          {
            "name": "lambda_functions_without_x-ray_tracing",
            "short_description": "Lambda functions without X-Ray tracing"
          },
          {
            "name": "lambda_iam_invokefunction_misconfigured",
            "short_description": "Lambda IAM InvokeFunction misconfigured"
          },
          {
            "name": "lambda_permission_misconfigured",
            "short_description": "Lambda permission misconfigured"
          },
          {
            "name": "lambda_permission_principal_is_wildcard",
            "short_description": "Lambda permission principal is wildcard"
          },
          {
            "name": "lambda_with_vulnerable_policy",
            "short_description": "Lambda with vulnerable policy"
          },
          {
            "name": "launch_configuration_is_not_encrypted",
            "short_description": "Launch configuration is not encrypted"
          },
          {
            "name": "misconfigured_password_policy_expiration",
            "short_description": "Misconfigured password policy expiration"
          },
          {
            "name": "missing_cluster_log_types",
            "short_description": "Missing cluster log types"
          },
          {
            "name": "mq_broker_is_publicly_accessible",
            "short_description": "MQ broker is publicly accessible"
          },
          {
            "name": "mq_broker_logging_disabled",
            "short_description": "MQ broker logging disabled"
          },
          {
            "name": "msk_broker_is_publicly_accessible",
            "short_description": "MSK broker is publicly accessible"
          },
          {
            "name": "msk_cluster_encryption_disabled",
            "short_description": "MSK cluster encryption disabled"
          },
          {
            "name": "msk_cluster_logging_disabled",
            "short_description": "MSK cluster logging disabled"
          },
          {
            "name": "neptune_cluster_instance_is_publicly_accessible",
            "short_description": "Neptune cluster instance is publicly accessible"
          },
          {
            "name": "neptune_cluster_with_iam_database_authentication_disabled",
            "short_description": "Neptune cluster with IAM database authentication disabled"
          },
          {
            "name": "neptune_database_cluster_encryption_disabled",
            "short_description": "Neptune database cluster encryption disabled"
          },
          {
            "name": "neptune_logging_disabled",
            "short_description": "Neptune logging is disabled"
          },
          {
            "name": "neptune_snapshots_not_encrypted",
            "short_description": "Neptune cluster snapshot not encrypted"
          },
          {
            "name": "network_acl_with_unrestricted_access_to_rdp",
            "short_description": "Network ACL with unrestricted access to RDP"
          },
          {
            "name": "network_acl_with_unrestricted_access_to_ssh",
            "short_description": "Network ACL with unrestricted access to SSH"
          },
          {
            "name": "no_password_policy_enabled",
            "short_description": "No password policy enabled"
          },
          {
            "name": "no_stack_policy",
            "short_description": "No stack policy"
          },
          {
            "name": "password_without_reuse_prevention",
            "short_description": "Password without reuse prevention"
          },
          {
            "name": "policy_without_principal",
            "short_description": "Policy without principal"
          },
          {
            "name": "public_and_private_ec2_share_role",
            "short_description": "Public and private EC2 share role"
          },
          {
            "name": "public_lambda_via_api_gateway",
            "short_description": "Public Lambda via API Gateway"
          },
          {
            "name": "rds_associated_with_public_subnet",
            "short_description": "RDS associated with public subnet"
          },
          {
            "name": "rds_cluster_with_backup_disabled",
            "short_description": "RDS cluster with backup disabled"
          },
          {
            "name": "rds_database_cluster_not_encrypted",
            "short_description": "RDS database cluster not encrypted"
          },
          {
            "name": "rds_db_instance_publicly_accessible",
            "short_description": "RDS DB instance publicly accessible"
          },
          {
            "name": "rds_storage_not_encrypted",
            "short_description": "RDS storage not encrypted"
          },
          {
            "name": "rds_using_default_port",
            "short_description": "RDS using default port"
          },
          {
            "name": "rds_with_backup_disabled",
            "short_description": "RDS with backup disabled"
          },
          {
            "name": "rds_without_logging",
            "short_description": "RDS without logging"
          },
          {
            "name": "redis_disabled",
            "short_description": "Redis disabled"
          },
          {
            "name": "redis_not_compliant",
            "short_description": "Redis not compliant"
          },
          {
            "name": "redshift_cluster_logging_disabled",
            "short_description": "Redshift cluster logging disabled"
          },
          {
            "name": "redshift_cluster_without_vpc",
            "short_description": "Redshift cluster without VPC"
          },
          {
            "name": "redshift_not_encrypted",
            "short_description": "Redshift not encrypted"
          },
          {
            "name": "redshift_publicly_accessible",
            "short_description": "Redshift publicly accessible"
          },
          {
            "name": "redshift_using_default_port",
            "short_description": "Redshift using default port"
          },
          {
            "name": "remote_desktop_port_open_to_internet",
            "short_description": "Remote Desktop port open to internet"
          },
          {
            "name": "resource_not_using_tags",
            "short_description": "Resource not using tags"
          },
          {
            "name": "rest_api_with_vulnerable_policy",
            "short_description": "REST API with vulnerable policy"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_glue_UpdateDevEndpoint",
            "short_description": "Role with privilege escalation by actions 'glue:UpdateDevEndpoint'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_AddUserToGroup",
            "short_description": "Role with privilege escalation by actions 'iam:AddUserToGroup'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_AttachGroupPolicy",
            "short_description": "Role with privilege escalation by actions 'iam:AttachGroupPolicy'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_AttachRolePolicy",
            "short_description": "Role with privilege escalation by actions 'iam:AttachRolePolicy'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_AttachUserPolicy",
            "short_description": "Role with privilege escalation by actions 'iam:AttachUserPolicy'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_CreateAccessKey",
            "short_description": "Role with privilege escalation by actions 'iam:CreateAccessKey'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_CreateLoginProfile",
            "short_description": "Role with privilege escalation by actions 'iam:CreateLoginProfile'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_CreatePolicyVersion",
            "short_description": "Role with privilege escalation by actions 'iam:CreatePolicyVersion'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_PassRole_and_cloudformation_CreateStack",
            "short_description": "Role with privilege escalation by actions 'cloudformation:CreateStack' and 'iam:PassRole'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_PassRole_and_ec2_RunInstances",
            "short_description": "Role with privilege escalation by actions 'ec2:RunInstances' and 'iam:PassRole'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_PassRole_and_glue_CreateDevEndpoint",
            "short_description": "Role with privilege escalation by actions 'glue:CreateDevEndpoint' and 'iam:PassRole'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_PassRole_and_lambda_CreateFunction_lambda_InvokeFunction",
            "short_description": "Role with privilege escalation by actions 'lambda:CreateFunction' and 'iam:PassRole' and 'lambda:InvokeFunction'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_PutGroupPolicy",
            "short_description": "Role with privilege escalation by actions 'iam:PutGroupPolicy'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_PutRolePolicy",
            "short_description": "Role with privilege escalation by actions 'iam:PutRolePolicy'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_PutUserPolicy",
            "short_description": "Role with privilege escalation by actions 'iam:PutUserPolicy'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_SetDefaultPolicyVersion",
            "short_description": "Role with privilege escalation by actions 'iam:SetDefaultPolicyVersion'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_UpdateAssumeRolePolicy_and_sts_AssumeRole",
            "short_description": "Role with privilege escalation by actions 'iam:UpdateAssumeRolePolicy' and 'sts:AssumeRole'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_iam_UpdateLoginProfile",
            "short_description": "Role with privilege escalation by actions 'iam:UpdateLoginProfile'"
          },
          {
            "name": "role_with_privilege_escalation_by_actions_lambda_UpdateFunctionCode",
            "short_description": "Role with privilege escalation by actions 'lambda:UpdateFunctionCode'"
          },
          {
            "name": "root_account_has_active_access_keys",
            "short_description": "Root account has active access keys"
          },
          {
            "name": "route53_record_undefined",
            "short_description": "Route53 record undefined"
          },
          {
            "name": "s3_bucket_access_to_any_principal",
            "short_description": "S3 bucket access to any principal"
          },
          {
            "name": "s3_bucket_acl_allows_read_or_write_to_all_users",
            "short_description": "S3 bucket ACL allows read or write to all users"
          },
          {
            "name": "s3_bucket_acl_allows_read_to_any_authenticated_user",
            "short_description": "S3 bucket ACL allows read to any authenticated user"
          },
          {
            "name": "s3_bucket_acl_grants_write_acp_permission",
            "short_description": "S3 bucket ACL grants WRITE_ACP permission"
          },
          {
            "name": "s3_bucket_allows_access_to_all_authenticated_users",
            "short_description": "S3 bucket allows authenticated users access"
          },
          {
            "name": "s3_bucket_allows_delete_action_from_all_principals",
            "short_description": "S3 bucket allows delete action from all principals"
          },
          {
            "name": "s3_bucket_allows_get_action_from_all_principals",
            "short_description": "S3 bucket allows get action from all principals"
          },
          {
            "name": "s3_bucket_allows_list_action_from_all_principals",
            "short_description": "S3 bucket allows list action from all principals"
          },
          {
            "name": "s3_bucket_allows_public_acl",
            "short_description": "S3 bucket allows public ACL"
          },
          {
            "name": "s3_bucket_allows_put_action_from_all_principals",
            "short_description": "S3 bucket allows put action from all principals"
          },
          {
            "name": "s3_bucket_logging_disabled",
            "short_description": "S3 bucket logging disabled"
          },
          {
            "name": "s3_bucket_object_level_cloudtrail_logging_disabled",
            "short_description": "S3 bucket object-level CloudTrail logging disabled"
          },
          {
            "name": "s3_bucket_object_not_encrypted",
            "short_description": "S3 bucket object not encrypted"
          },
          {
            "name": "s3_bucket_policy_accepts_http_requests",
            "short_description": "S3 bucket policy accepts HTTP requests"
          },
          {
            "name": "s3_bucket_public_acl_overridden_by_public_access_block",
            "short_description": "S3 bucket public ACL overridden by public access block"
          },
          {
            "name": "s3_bucket_with_all_permissions",
            "short_description": "S3 bucket with all permissions"
          },
          {
            "name": "s3_bucket_with_public_policy",
            "short_description": "S3 bucket allows public policy"
          },
          {
            "name": "s3_bucket_with_unsecured_cors_rule",
            "short_description": "S3 bucket with unsecured CORS rule"
          },
          {
            "name": "s3_bucket_without_enabled_mfa_delete",
            "short_description": "S3 bucket without enabled MFA delete"
          },
          {
            "name": "s3_bucket_without_ignore_public_acl",
            "short_description": "S3 bucket without ignore public ACL"
          },
          {
            "name": "s3_bucket_without_restriction_of_public_bucket",
            "short_description": "S3 bucket without restriction of public bucket"
          },
          {
            "name": "s3_bucket_without_versioning",
            "short_description": "S3 bucket without versioning"
          },
          {
            "name": "s3_static_website_host_enabled",
            "short_description": "S3 static website host enabled"
          },
          {
            "name": "sagemaker_direct_internet_access_enabled",
            "short_description": "SageMaker notebook internet access enabled"
          },
          {
            "name": "sagemaker_endpoint_configuration_encryption_disabled",
            "short_description": "SageMaker endpoint configuration encryption disabled"
          },
          {
            "name": "sagemaker_notebook_instance_without_kms",
            "short_description": "SageMaker notebook instance without KMS"
          },
          {
            "name": "secrets_manager_with_vulnerable_policy",
            "short_description": "Secrets Manager with vulnerable policy"
          },
          {
            "name": "secretsmanager_secret_encrypted_with_aws_managed_key",
            "short_description": "Secrets Manager secret encrypted with AWS-managed key"
          },
          {
            "name": "secretsmanager_secret_without_kms",
            "short_description": "Secrets Manager secret without KMS"
          },
          {
            "name": "secure_ciphers_disabled",
            "short_description": "Secure ciphers disabled"
          },
          {
            "name": "security_group_rules_without_description",
            "short_description": "Security group rule without description"
          },
          {
            "name": "security_group_with_unrestricted_access_to_ssh",
            "short_description": "Security group with unrestricted access to SSH"
          },
          {
            "name": "security_group_without_description",
            "short_description": "Security group rule without description"
          },
          {
            "name": "security_groups_not_used",
            "short_description": "Security group not used"
          },
          {
            "name": "sensitive_port_is_exposed_to_entire_network",
            "short_description": "Sensitive port is exposed to entire network"
          },
          {
            "name": "sensitive_port_is_exposed_to_small_public_network",
            "short_description": "Sensitive port is exposed to small public network"
          },
          {
            "name": "sensitive_port_is_exposed_to_wide_private_network",
            "short_description": "Sensitive port is exposed to wide private network"
          },
          {
            "name": "service_control_policies_disabled",
            "short_description": "Service control policies disabled"
          },
          {
            "name": "ses_policy_with_allowed_iam_actions",
            "short_description": "SES policy with allowed IAM actions"
          },
          {
            "name": "shield_advanced_not_in_use",
            "short_description": "Shield Advanced not in use"
          },
          {
            "name": "sns_topic_encrypted_with_aws_managed_key",
            "short_description": "SNS topic encrypted with AWS managed key"
          },
          {
            "name": "sns_topic_is_publicly_accessible",
            "short_description": "SNS topic is publicly accessible"
          },
          {
            "name": "sns_topic_not_encrypted",
            "short_description": "SNS topic not encrypted"
          },
          {
            "name": "sns_topic_publicity_has_allow_and_not_action_simultaneously",
            "short_description": "SNS topic publicity has allow and NotAction simultaneously"
          },
          {
            "name": "sql_analysis_services_port_2383_is_publicly_accessible",
            "short_description": "SQL analysis services port 2383 (TCP) is publicly accessible"
          },
          {
            "name": "sqs_policy_allows_all_actions",
            "short_description": "SQS policy allows all actions"
          },
          {
            "name": "sqs_policy_with_public_access",
            "short_description": "SQS policy with public access"
          },
          {
            "name": "sqs_queue_exposed",
            "short_description": "SQS queue exposed"
          },
          {
            "name": "sqs_vpc_endpoint_without_dns_resolution",
            "short_description": "SQS VPC endpoint without DNS resolution"
          },
          {
            "name": "sqs_with_sse_disabled",
            "short_description": "SQS with SSE disabled"
          },
          {
            "name": "ssm_session_transit_encryption_disabled",
            "short_description": "SSM session transit encryption disabled"
          },
          {
            "name": "sso_identity_user_unsafe_creation",
            "short_description": "SSO identity user unsafe creation"
          },
          {
            "name": "sso_permission_with_inadequate_user_session_duration",
            "short_description": "SSO permission with inadequate user session duration"
          },
          {
            "name": "sso_policy_with_full_privileges",
            "short_description": "SSO policy with full privileges"
          },
          {
            "name": "stack_notifications_disabled",
            "short_description": "Stack notifications disabled"
          },
          {
            "name": "stack_retention_disabled",
            "short_description": "Stack retention disabled"
          },
          {
            "name": "stack_without_template",
            "short_description": "Stack without template"
          },
          {
            "name": "team_tag_not_present",
            "short_description": "Team tag missing on AWS resource"
          },
          {
            "name": "unknown_port_exposed_to_internet",
            "short_description": "Unknown port exposed to internet"
          },
          {
            "name": "unrestricted_security_group_ingress",
            "short_description": "Unrestricted security group ingress"
          },
          {
            "name": "unscanned_ecr_image",
            "short_description": "Unscanned ECR image"
          },
          {
            "name": "user_data_contains_encoded_private_key",
            "short_description": "User data contains encoded private key"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_glue_UpdateDevEndpoint",
            "short_description": "User with privilege escalation by actions 'glue:UpdateDevEndpoint'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_AddUserToGroup",
            "short_description": "User with privilege escalation by actions 'iam:AddUserToGroup'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_AttachGroupPolicy",
            "short_description": "User with privilege escalation by actions 'iam:AttachGroupPolicy'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_AttachRolePolicy",
            "short_description": "User with privilege escalation by actions 'iam:AttachRolePolicy'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_AttachUserPolicy",
            "short_description": "User with privilege escalation by actions 'iam:AttachUserPolicy'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_CreateAccessKey",
            "short_description": "User with privilege escalation by actions 'iam:CreateAccessKey'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_CreateLoginProfile",
            "short_description": "User with privilege escalation by actions 'iam:CreateLoginProfile'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_CreatePolicyVersion",
            "short_description": "User with privilege escalation by actions 'iam:CreatePolicyVersion'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_PassRole_and_cloudformation_CreateStack",
            "short_description": "User with privilege escalation by actions 'cloudformation:CreateStack' and 'iam:PassRole'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_PassRole_and_ec2_RunInstances",
            "short_description": "User with privilege escalation by actions 'ec2:RunInstances' and 'iam:PassRole'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_PassRole_and_glue_CreateDevEndpoint",
            "short_description": "User with privilege escalation by actions 'glue:CreateDevEndpoint' and 'iam:PassRole'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_PassRole_and_lambda_CreateFunction_and_lambda_InvokeFunction",
            "short_description": "User with privilege escalation by actions 'lambda:CreateFunction' and 'iam:PassRole' and 'lambda:InvokeFunction'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_PutGroupPolicy",
            "short_description": "User with privilege escalation by actions 'iam:PutGroupPolicy'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_PutRolePolicy",
            "short_description": "User with privilege escalation by actions 'iam:PutRolePolicy'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_PutUserPolicy",
            "short_description": "User with privilege escalation by actions 'iam:PutUserPolicy'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_SetDefaultPolicyVersion",
            "short_description": "User with privilege escalation by actions 'iam:SetDefaultPolicyVersion'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_UpdateAssumeRolePolicy_and_sts_AssumeRole",
            "short_description": "User with privilege escalation by actions 'iam:UpdateAssumeRolePolicy' and 'sts:AssumeRole'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_iam_UpdateLoginProfile",
            "short_description": "User with privilege escalation by actions 'iam:UpdateLoginProfile'"
          },
          {
            "name": "user_with_privilege_escalation_by_actions_lambda_UpdateFunctionCode",
            "short_description": "User with privilege escalation by actions 'lambda:UpdateFunctionCode'"
          },
          {
            "name": "vpc_default_security_group_accepts_all_traffic",
            "short_description": "VPC default security group accepts all traffic"
          },
          {
            "name": "vpc_flowlogs_disabled",
            "short_description": "VPC Flow Logs disabled"
          },
          {
            "name": "vpc_peering_route_table_with_unrestricted_cidr",
            "short_description": "VPC peering route table with unrestricted CIDR"
          },
          {
            "name": "vpc_subnet_assigns_public_ip",
            "short_description": "VPC subnet assigns public IP"
          },
          {
            "name": "vpc_without_network_firewall",
            "short_description": "VPC without Network Firewall"
          },
          {
            "name": "vulnerable_default_ssl_certificate",
            "short_description": "Vulnerable default SSL certificate"
          },
          {
            "name": "workspaces_workspace_volume_not_encrypted",
            "short_description": "Workspaces workspace volume not encrypted"
          }
        ]
      },
      {
        "name": "azure",
        "short_description": "AZURE Rules",
        "rules": [
          {
            "name": "ad_admin_not_configured_for_sql_server",
            "short_description": "AD admin not configured for SQL server"
          },
          {
            "name": "admin_user_enabled_for_container_registry",
            "short_description": "Admin user enabled for container registry"
          },
          {
            "name": "aks_disk_encryption_set_id_undefined",
            "short_description": "AKS disk encryption set ID undefined"
          },
          {
            "name": "aks_network_policy_misconfigured",
            "short_description": "AKS network policy misconfigured"
          },
          {
            "name": "aks_private_cluster_disabled",
            "short_description": "AKS private cluster disabled"
          },
          {
            "name": "aks_rbac_disabled",
            "short_description": "AKS RBAC disabled"
          },
          {
            "name": "aks_uses_azure_policies_addon_disabled",
            "short_description": "Azure Policy Add-on Disabled in AKS Cluster"
          },
          {
            "name": "app_service_authentication_disabled",
            "short_description": "App Service authentication disabled"
          },
          {
            "name": "app_service_ftps_enforce_disabled",
            "short_description": "App Service FTPS enforce disabled"
          },
          {
            "name": "app_service_http2_disabled",
            "short_description": "App Service HTTP2 disabled"
          },
          {
            "name": "app_service_managed_identity_disabled",
            "short_description": "App Service managed identity disabled"
          },
          {
            "name": "app_service_not_using_latest_tls_encryption_version",
            "short_description": "App Service not using latest TLS encryption version"
          },
          {
            "name": "app_service_without_latest_php_version",
            "short_description": "App Service without latest PHP version"
          },
          {
            "name": "app_service_without_latest_python_version",
            "short_description": "App Service without latest Python version"
          },
          {
            "name": "azure_active_directory_authentication",
            "short_description": "Azure Active Directory authentication"
          },
          {
            "name": "azure_app_service_client_certificate_disabled",
            "short_description": "Azure App Service client certificate disabled"
          },
          {
            "name": "azure_cognitive_search_public_network_access_enabled",
            "short_description": "Azure Cognitive Search public network access enabled"
          },
          {
            "name": "azure_container_registry_with_no_locks",
            "short_description": "Azure Container Registry with no locks"
          },
          {
            "name": "azure_front_door_waf_disabled",
            "short_description": "Azure Front Door WAF disabled"
          },
          {
            "name": "azure_instance_using_basic_authentication",
            "short_description": "Azure instance using basic authentication"
          },
          {
            "name": "cosmos_db_account_without_tags",
            "short_description": "Cosmos DB account without tags"
          },
          {
            "name": "cosmosdb_account_ip_range_filter_not_set",
            "short_description": "CosmosDB account IP range filter not set"
          },
          {
            "name": "dashboard_is_enabled",
            "short_description": "Dashboard is enabled"
          },
          {
            "name": "default_azure_storage_account_network_access_is_too_permissive",
            "short_description": "Default Azure storage account network access is too permissive"
          },
          {
            "name": "email_alerts_disabled",
            "short_description": "Email alerts disabled"
          },
          {
            "name": "encryption_on_managed_disk_disabled",
            "short_description": "Encryption on managed disk disabled"
          },
          {
            "name": "firewall_rule_allows_too_many_hosts_to_access_redis_cache",
            "short_description": "Firewall rule allows too many hosts to access Redis Cache"
          },
          {
            "name": "function_app_authentication_disabled",
            "short_description": "Function App authentication disabled"
          },
          {
            "name": "function_app_client_certificates_unrequired",
            "short_description": "Function App client certificates not required"
          },
          {
            "name": "function_app_ftps_enforce_disabled",
            "short_description": "Function App FTPS enforce disabled"
          },
          {
            "name": "function_app_http2_disabled",
            "short_description": "Function App HTTP2 disabled"
          },
          {
            "name": "function_app_managed_identity_disabled",
            "short_description": "Function App managed identity disabled"
          },
          {
            "name": "function_app_not_using_latest_tls_encryption_version",
            "short_description": "Function App not using latest TLS encryption version"
          },
          {
            "name": "geo_redundancy_is_disabled",
            "short_description": "Geo redundancy is disabled"
          },
          {
            "name": "key_expiration_not_set",
            "short_description": "Key expiration not set"
          },
          {
            "name": "key_vault_secrets_content_type_undefined",
            "short_description": "Key Vault secrets content type undefined"
          },
          {
            "name": "log_retention_is_not_set",
            "short_description": "Log retention is not set"
          },
          {
            "name": "mariadb_not_using_latest_tls",
            "short_description": "Ensure Azure MariaDB server is using latest TLS (1.2)"
          },
          {
            "name": "mariadb_public_network_access_enabled",
            "short_description": "MariaDB server public network access enabled"
          },
          {
            "name": "mariadb_server_georedundant_backup_disabled",
            "short_description": "MariaDB server geo-redundant backup disabled"
          },
          {
            "name": "mssql_server_auditing_disabled",
            "short_description": "MSSQL server auditing disabled"
          },
          {
            "name": "mssql_server_public_network_access_enabled",
            "short_description": "MSSQL server public network access enabled"
          },
          {
            "name": "mysql_enforce_ssl_connection_disabled",
            "short_description": "ssl_enforcement_enabled is not set to ENABLED for MySQL database server"
          },
          {
            "name": "mysql_not_using_latest_tls",
            "short_description": "Ensure MySQL is using the latest version of TLS encryption"
          },
          {
            "name": "mysql_server_public_access_enabled",
            "short_description": "MySQL server public access enabled"
          },
          {
            "name": "mysql_ssl_connection_disabled",
            "short_description": "MySQL SSL connection disabled"
          },
          {
            "name": "network_interfaces_ip_forwarding_enabled",
            "short_description": "Network interfaces IP forwarding enabled"
          },
          {
            "name": "network_interfaces_with_public_ip",
            "short_description": "Network interfaces with public IP"
          },
          {
            "name": "network_watcher_flow_disabled",
            "short_description": "Network watcher flow disabled"
          },
          {
            "name": "postgres_enforce_ssl_connection_disabled",
            "short_description": "ssl_enforcement_enabled is not set to ENABLED for PostgreSQL database server"
          },
          {
            "name": "postgres_sql_server_enables_public_access",
            "short_description": "Ensure that PostgreSQL server disables public network access"
          },
          {
            "name": "postgresql_log_checkpoints_disabled",
            "short_description": "PostgreSQL log checkpoints disabled"
          },
          {
            "name": "postgresql_log_connections_not_set",
            "short_description": "PostgreSQL log connections not set"
          },
          {
            "name": "postgresql_log_disconnections_not_set",
            "short_description": "PostgreSQL log disconnections not set"
          },
          {
            "name": "postgresql_log_duration_not_set",
            "short_description": "PostgreSQL log duration not set"
          },
          {
            "name": "postgresql_server_infrastructure_encryption_disabled",
            "short_description": "PostgreSQL server infrastructure encryption disabled"
          },
          {
            "name": "postgresql_server_threat_detection_policy_disabled",
            "short_description": "PostgreSQL Server threat detection policy disabled"
          },
          {
            "name": "postgresql_server_without_connection_throttling",
            "short_description": "PostgreSQL server without connection throttling"
          },
          {
            "name": "public_storage_account",
            "short_description": "Public storage account"
          },
          {
            "name": "rdp_is_exposed_to_the_internet",
            "short_description": "RDP is exposed to the internet"
          },
          {
            "name": "redis_cache_allows_non_ssl_connections",
            "short_description": "Redis cache allows non SSL connections"
          },
          {
            "name": "redis_entirely_accessible",
            "short_description": "Redis entirely accessible"
          },
          {
            "name": "redis_not_updated_regularly",
            "short_description": "Redis not updated regularly"
          },
          {
            "name": "redis_publicly_accessible",
            "short_description": "Redis publicly accessible"
          },
          {
            "name": "remote_debugging_enabled_app_service",
            "short_description": "Ensure web app is not remotely debuggable"
          },
          {
            "name": "role_assignment_not_limit_guest_users_permissions",
            "short_description": "Role assignment not limit guest user permissions"
          },
          {
            "name": "role_definition_allows_custom_role_creation",
            "short_description": "Role definition allows custom role creation"
          },
          {
            "name": "secret_expiration_not_set",
            "short_description": "Secret expiration not set"
          },
          {
            "name": "security_center_pricing_tier_is_not_standard",
            "short_description": "Security center pricing tier is not standard"
          },
          {
            "name": "security_contact_email",
            "short_description": "Security contact email"
          },
          {
            "name": "security_group_is_not_configured",
            "short_description": "Security group is not configured"
          },
          {
            "name": "sensitive_port_is_exposed_to_entire_network",
            "short_description": "Sensitive port is exposed to entire network"
          },
          {
            "name": "sensitive_port_is_exposed_to_small_public_network",
            "short_description": "Sensitive port is exposed to small public network"
          },
          {
            "name": "sensitive_port_is_exposed_to_wide_private_network",
            "short_description": "Sensitive port is exposed to wide private network"
          },
          {
            "name": "small_activity_log_retention_period",
            "short_description": "Small activity log retention period"
          },
          {
            "name": "small_flow_logs_retention_period",
            "short_description": "Small flow logs retention period"
          },
          {
            "name": "small_msql_server_audit_retention",
            "short_description": "Small MSSQL server audit retention"
          },
          {
            "name": "small_mssql_audit_retention_period",
            "short_description": "Small MSSQL audit retention period"
          },
          {
            "name": "small_postgresql_db_server_log_retention_period",
            "short_description": "Small PostgreSQL DB server log retention period"
          },
          {
            "name": "sql_database_audit_disabled",
            "short_description": "SQL database audit disabled"
          },
          {
            "name": "sql_server_alert_email_disabled",
            "short_description": "SQL server alert email disabled"
          },
          {
            "name": "sql_server_auditing_disabled",
            "short_description": "SQL server auditing disabled"
          },
          {
            "name": "sql_server_ingress_from_any_ip",
            "short_description": "Sqlserver ingress from any IP"
          },
          {
            "name": "sql_server_predictable_active_directory_admin_account_name",
            "short_description": "SQL server predictable Active Directory admin account name"
          },
          {
            "name": "sql_server_predictable_admin_account_name",
            "short_description": "SQL server predictable admin account name"
          },
          {
            "name": "ssh_is_exposed_to_the_internet",
            "short_description": "SSH is exposed to the Internet"
          },
          {
            "name": "ssl_enforce_is_disabled",
            "short_description": "SSL enforce disabled"
          },
          {
            "name": "storage_account_not_forcing_https",
            "short_description": "Storage account not forcing HTTPS"
          },
          {
            "name": "storage_account_not_using_latest_tls_encryption_version",
            "short_description": "Storage account not using latest TLS encryption version"
          },
          {
            "name": "storage_container_is_publicly_accessible",
            "short_description": "Storage container is publicly accessible"
          },
          {
            "name": "storage_share_file_allows_all_acl_permissions",
            "short_description": "Storage share file allows all ACL permissions"
          },
          {
            "name": "storage_table_allows_all_acl_permissions",
            "short_description": "Storage table allows all ACL permissions"
          },
          {
            "name": "team_tag_not_present",
            "short_description": "Ensure that Azure cloud resource has a team tag"
          },
          {
            "name": "trusted_microsoft_services_not_enabled",
            "short_description": "Trusted Microsoft services not enabled"
          },
          {
            "name": "udp_services_not_restricted_from_internet",
            "short_description": "Ensure that UDP services are restricted from the Internet"
          },
          {
            "name": "unrestricted_sql_server_access",
            "short_description": "Unrestricted SQL server access"
          },
          {
            "name": "vault_auditing_disabled",
            "short_description": "Vault auditing disabled"
          },
          {
            "name": "virtual_network_with_ddos_protection_plan_disabled",
            "short_description": "Virtual network with DDoS protection plan disabled"
          },
          {
            "name": "vm_not_attached_to_network",
            "short_description": "VM not attached to network"
          },
          {
            "name": "waf_is_disabled_for_azure_application_gateway",
            "short_description": "WAF is disabled for Azure application gateway"
          },
          {
            "name": "web_app_accepting_traffic_other_than_https",
            "short_description": "Web app accepting traffic other than HTTPS"
          }
        ]
      },
      {
        "name": "gcp",
        "short_description": "GCP Rules",
        "rules": [
          {
            "name": "artifact_registry_repository_is_public",
            "short_description": "Artifact Registry repo is public"
          },
          {
            "name": "bigquery_dataset_is_public",
            "short_description": "BigQuery dataset is public"
          },
          {
            "name": "bigquery_table_is_public",
            "short_description": "BigQuery table is public"
          },
          {
            "name": "cloud_dns_without_dnssec",
            "short_description": "Cloud DNS without DNSSEC"
          },
          {
            "name": "cloud_kms_key_rings_are_public",
            "short_description": "Cloud KMS key ring is anonymously or publicly accessible"
          },
          {
            "name": "cloud_run_service_is_public",
            "short_description": "Cloud Run service is public"
          },
          {
            "name": "cloud_storage_anonymous_or_publicly_accessible",
            "short_description": "Cloud Storage is anonymous or publicly accessible"
          },
          {
            "name": "cloud_storage_bucket_is_publicly_accessible",
            "short_description": "Cloud Storage bucket is publicly accessible"
          },
          {
            "name": "cloud_storage_bucket_logging_not_enabled",
            "short_description": "Cloud Storage bucket logging not enabled"
          },
          {
            "name": "cloud_storage_bucket_versioning_disabled",
            "short_description": "Cloud Storage bucket versioning disabled"
          },
          {
            "name": "cluster_labels_disabled",
            "short_description": "Cluster labels disabled"
          },
          {
            "name": "container_registry_repository_is_public",
            "short_description": "Container Registry repo is public"
          },
          {
            "name": "cos_node_image_not_used",
            "short_description": "COS node image not used"
          },
          {
            "name": "dataproc_cluster_has_public_ip",
            "short_description": "Dataproc clusters has public IPs"
          },
          {
            "name": "dataproc_clusters_is_public",
            "short_description": "Dataproc clusters publicly accessible"
          },
          {
            "name": "disk_encryption_disabled",
            "short_description": "Disk encryption disabled"
          },
          {
            "name": "dnssec_using_rsasha1",
            "short_description": "DNSSEC using RSASHA1"
          },
          {
            "name": "firewall_ingress_allows_unrestricted_ftp_access",
            "short_description": "Google Compute firewall ingress allows unrestricted FTP access"
          },
          {
            "name": "firewall_ingress_allows_unrestricted_mysql_access",
            "short_description": "Google Compute firewall ingress allows unrestricted MySQL access"
          },
          {
            "name": "gke_control_plane_is_public",
            "short_description": "GKE control plane is public"
          },
          {
            "name": "gke_legacy_authorization_enabled",
            "short_description": "GKE legacy authorization enabled"
          },
          {
            "name": "gke_using_default_service_account",
            "short_description": "GKE using default service account"
          },
          {
            "name": "google_compute_network_using_default_firewall_rule",
            "short_description": "Google Compute network using default firewall rule"
          },
          {
            "name": "google_compute_network_using_firewall_rule_allows_all_ports",
            "short_description": "Google Compute network using firewall rule that allows all ports"
          },
          {
            "name": "google_compute_network_using_firewall_rule_allows_port_range",
            "short_description": "Google Compute network using firewall rule that allows port range"
          },
          {
            "name": "google_compute_ssl_policy_weak_cipher_in_use",
            "short_description": "Google Compute SSL policy weak cipher in use"
          },
          {
            "name": "google_compute_subnetwork_logging_disabled",
            "short_description": "Google Compute subnetwork logging disabled"
          },
          {
            "name": "google_compute_subnetwork_with_private_google_access_disabled",
            "short_description": "Google Compute subnetwork with private Google access disabled"
          },
          {
            "name": "google_container_node_pool_auto_repair_disabled",
            "short_description": "Google Container node pool auto repair disabled"
          },
          {
            "name": "google_project_auto_create_network_disabled",
            "short_description": "Google project auto create network disabled"
          },
          {
            "name": "google_project_iam_binding_service_account_has_token_creator_or_account_user_role",
            "short_description": "Google project IAM binding service account has token creator or account user role"
          },
          {
            "name": "google_project_iam_member_service_account_has_admin_role",
            "short_description": "Google project IAM member service account has admin role"
          },
          {
            "name": "google_project_iam_member_service_account_has_token_creator_or_account_user_role",
            "short_description": "Google project IAM member service account has token creator or account user role"
          },
          {
            "name": "google_storage_bucket_level_access_disabled",
            "short_description": "Google Storage bucket level access disabled"
          },
          {
            "name": "high_google_kms_crypto_key_rotation_period",
            "short_description": "High Google KMS crypto key rotation period"
          },
          {
            "name": "iam_audit_not_properly_configured",
            "short_description": "IAM audit not properly configured"
          },
          {
            "name": "ip_aliasing_disabled",
            "short_description": "IP aliasing disabled"
          },
          {
            "name": "ip_forwarding_enabled",
            "short_description": "IP forwarding enabled"
          },
          {
            "name": "kms_admin_and_crypto_key_roles_in_use",
            "short_description": "KMS admin and CryptoKey roles in use"
          },
          {
            "name": "kms_crypto_key_publicly_accessible",
            "short_description": "KMS CryptoKey is publicly accessible"
          },
          {
            "name": "legacy_client_certificate_auth_enabled",
            "short_description": "Legacy client certificate auth enabled"
          },
          {
            "name": "legacy_networks_exist_for_project",
            "short_description": "Ensure legacy networks do not exist for a project"
          },
          {
            "name": "network_policy_disabled",
            "short_description": "Network policy disabled"
          },
          {
            "name": "node_auto_upgrade_disabled",
            "short_description": "Node auto upgrade disabled"
          },
          {
            "name": "not_proper_email_account_in_use",
            "short_description": "Not proper email account in use"
          },
          {
            "name": "os_login_disabled",
            "short_description": "OSLogin disabled"
          },
          {
            "name": "os_login_is_disabled_for_vm_instance",
            "short_description": "OSLogin is disabled for VM instance"
          },
          {
            "name": "outdated_gke_version",
            "short_description": "Outdated GKE version"
          },
          {
            "name": "pod_security_policy_disabled",
            "short_description": "Pod security policy disabled"
          },
          {
            "name": "private_cluster_disabled",
            "short_description": "Private cluster disabled"
          },
          {
            "name": "project_wide_ssh_keys_are_enabled_in_vm_instances",
            "short_description": "Project-wide SSH keys are enabled in VM instances"
          },
          {
            "name": "pubsub_topic_is_public",
            "short_description": "Pub/Sub Topics are anonymously or publicly accessible"
          },
          {
            "name": "rdp_access_is_not_restricted",
            "short_description": "RDP access is not restricted"
          },
          {
            "name": "service_account_with_improper_privileges",
            "short_description": "Service account with improper privileges"
          },
          {
            "name": "service_has_non_gcp_managed_service_account_keys",
            "short_description": "There are non GCP-managed service account keys for a service account"
          },
          {
            "name": "shielded_gke_nodes_disabled",
            "short_description": "Shielded GKE nodes disabled"
          },
          {
            "name": "shielded_vm_disabled",
            "short_description": "Shielded VM disabled"
          },
          {
            "name": "sql_database_has_cross_db_ownership_chaining",
            "short_description": "SQL Server cross DB ownership chaining enabled"
          },
          {
            "name": "sql_database_instance_does_not_have_skip_show_database",
            "short_description": "Ensure SQL database instance has skip show database flag"
          },
          {
            "name": "sql_db_instance_backup_disabled",
            "short_description": "SQL DB instance backup disabled"
          },
          {
            "name": "sql_db_instance_is_publicly_accessible",
            "short_description": "SQL DB instance publicly accessible"
          },
          {
            "name": "sql_db_instance_with_ssl_disabled",
            "short_description": "SQL DB instance with SSL disabled"
          },
          {
            "name": "ssh_access_is_not_restricted",
            "short_description": "SSH access is not restricted"
          },
          {
            "name": "stackdriver_logging_disabled",
            "short_description": "Stackdriver Logging disabled"
          },
          {
            "name": "stackdriver_monitoring_disabled",
            "short_description": "Stackdriver Monitoring disabled"
          },
          {
            "name": "team_label_not_present",
            "short_description": "Team label missing on GCP resource"
          },
          {
            "name": "user_with_iam_role",
            "short_description": "User with IAM role"
          },
          {
            "name": "using_default_service_account",
            "short_description": "Using default service account"
          },
          {
            "name": "vm_serial_ports_are_enabled_for_vm_instances",
            "short_description": "Serial ports are enabled for VM instances"
          },
          {
            "name": "vm_with_full_cloud_access",
            "short_description": "VM with full cloud access"
          }
        ]
      }
    ]
  }
]